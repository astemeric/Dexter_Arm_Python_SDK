# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import robot_arm_pb2 as robot__arm__pb2


class ConfigurationUpdateStub(object):
    """The rpc method definitions are defined with regards to the server
    So SendUpdate will receive a ConfigRequest from the client
    Given this syntax, it seems as though the ConfigRequest is "passed"
    into the SendUpdate - but it's just syntax.
    On the client end, the client will make the request, and hold onto
    the "stub" of that request.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendUpdate = channel.unary_unary(
                '/RobotArm.ConfigurationUpdate/SendUpdate',
                request_serializer=robot__arm__pb2.currentStatus.SerializeToString,
                response_deserializer=robot__arm__pb2.robotConfiguration.FromString,
                )
        self.Move5 = channel.unary_unary(
                '/RobotArm.ConfigurationUpdate/Move5',
                request_serializer=robot__arm__pb2.moveRequest5.SerializeToString,
                response_deserializer=robot__arm__pb2.currentStatus.FromString,
                )
        self.Move7 = channel.unary_unary(
                '/RobotArm.ConfigurationUpdate/Move7',
                request_serializer=robot__arm__pb2.moveRequest7.SerializeToString,
                response_deserializer=robot__arm__pb2.currentStatus.FromString,
                )


class ConfigurationUpdateServicer(object):
    """The rpc method definitions are defined with regards to the server
    So SendUpdate will receive a ConfigRequest from the client
    Given this syntax, it seems as though the ConfigRequest is "passed"
    into the SendUpdate - but it's just syntax.
    On the client end, the client will make the request, and hold onto
    the "stub" of that request.

    """

    def SendUpdate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Move5(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Move7(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigurationUpdateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.SendUpdate,
                    request_deserializer=robot__arm__pb2.currentStatus.FromString,
                    response_serializer=robot__arm__pb2.robotConfiguration.SerializeToString,
            ),
            'Move5': grpc.unary_unary_rpc_method_handler(
                    servicer.Move5,
                    request_deserializer=robot__arm__pb2.moveRequest5.FromString,
                    response_serializer=robot__arm__pb2.currentStatus.SerializeToString,
            ),
            'Move7': grpc.unary_unary_rpc_method_handler(
                    servicer.Move7,
                    request_deserializer=robot__arm__pb2.moveRequest7.FromString,
                    response_serializer=robot__arm__pb2.currentStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RobotArm.ConfigurationUpdate', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConfigurationUpdate(object):
    """The rpc method definitions are defined with regards to the server
    So SendUpdate will receive a ConfigRequest from the client
    Given this syntax, it seems as though the ConfigRequest is "passed"
    into the SendUpdate - but it's just syntax.
    On the client end, the client will make the request, and hold onto
    the "stub" of that request.

    """

    @staticmethod
    def SendUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RobotArm.ConfigurationUpdate/SendUpdate',
            robot__arm__pb2.currentStatus.SerializeToString,
            robot__arm__pb2.robotConfiguration.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Move5(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RobotArm.ConfigurationUpdate/Move5',
            robot__arm__pb2.moveRequest5.SerializeToString,
            robot__arm__pb2.currentStatus.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Move7(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RobotArm.ConfigurationUpdate/Move7',
            robot__arm__pb2.moveRequest7.SerializeToString,
            robot__arm__pb2.currentStatus.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
